---
layout: post
title:      "Why did I decide to  learn web development?"
date:       2018-06-01 18:23:02 -0400
permalink:  why_did_i_decide_to_learn_web_development
---


The short answer: Because I think it is cool.

I've always had an affinity for development but never pursued it because I never had to do it much. Sure when I was in highschool, I played around with Visual Basic for a class, tinkered with html and css to make my Xanga or Myspace page look cool, but I still had no clue of all the things that programming made possible. How exactly does making a Visual Basic calculator translate to me being able to build an app that people would actually use? When I was younger, that gap of understanding was a enough for me to dismiss it as just something that I might or might not do. 

I've always been a do-it-yourself kind of person. I would never shy away from trying and learning new things with the reason "I don't know how to do it". Nowadays, it's so easy to learn or at least gain some more insight into how you could learn almost anything with a simple google search. Most topics I have had a pleasure to learn about were under the circumstances that...I had to do it. I had to fix the car so my parents could drive it, how to troubleshoot the computers so my family could use it, how to patch up large holes in the drywall because there's a giant hole in the wall of our kitchen, you get the point. One topic that has always intrigued me though, but hadn't had a chance to cross paths with much is programming. How in the world do you tell a machine to do things for you? I graduated from Stony Brook University with a bachelor's degree in Health Science with a concentration in Healthcare Informatics - I wanted to work in healthcare to help people, but my primary choice did not work out so I chose Informatics because of my interest in technology. Right after college, I didn't even work in healthcare, I joined a company that provided business and technology solutions to othercompanies, and became a Quality Assurance tester. I was clueless on the first day of the job - I had no idea what I was doing, it's scary to think back to how little I knew. But after 5 years of doing it, I became I became proficient at it. Most of the work revolved around developing test plans, writing test cases, manually executing them,  analyzing data in the database with SQL and documenting my findings. This was all done without knowledge of the code itself, there were many occasions where I thought, this would be so much easier and more efficient if I knew what the code was actually doing. I have worked closely with developers and gained an appreciation for what they do.  There were several occasions where I would attempt to learn to code, I dabbled a little with Python and C#. For each I was able to learn the basics - working with variables, arrays, looping, functions, building simple classes, etc., but I would always step away and forget all that I have learned. I did enjoy it while I was learning though, hands down I would prefer to be on the side of writing beautiful code and creating software over writing and executing use cases all day.. So up to this point, I have just been going with the flow and learning things on an as-needed basis. This time I am choosing something that truly interests me - I love troubleshooting and problem solving, and to me that is exactly what writing code is. Writing beautiful, efficient, and eloquent code to not only be functional but artistic.
