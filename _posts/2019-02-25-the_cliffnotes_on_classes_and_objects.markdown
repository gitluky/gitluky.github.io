---
layout: post
title:      "Teaching Object Oriented Programming to your Grandma"
date:       2019-02-25 23:12:10 -0500
permalink:  the_cliffnotes_on_classes_and_objects
---


Classes and objects are essentially the foundation of Object Oriented Programming. I have been working with them for a while a now and don't really put much thought into it while I'm smashing out new code on my keyboard anymore. But in the beginning when I was first learning it, it was a bit daunting. I felt I've reached a huge revelation - Morpheus had just given me the red pill and shown me how I should really be looking at the world. Instead of viewing everything as a continuous sequential stream of code, everything is viewed as separate objects modelled after the real world...people, cars, buildings, the woman in the red dress, etc. Let's dive deeper into the rabbit hole, and that!...will be the last of the Matrix references. 
A basic way to look at it is that the class itself is the blueprint as well as the manager for creating the objects (instance of the class in this case). A class is the blueprint, as in, it defines all the attributes the object has and things it can do(methods). For an example, given a Car class, the class Car itself is like the car factory and the purpose of this class is to provide a blueprint to make objects, specifically cars, as well as manager all the cars in its inventory. It will define all the instance variables to store information on each car such as make, model, color, type, transmission…anything really. Instance methods will be defined to interact with these instance variables and also allow the car to do things like turn, honk, accelerate, brake...yada yada yada. 
That might have been confusing, but let’s go through the works. 
Instance Variables
This is how we define a class (class name is always capitalized):
>  ![](https://lh3.googleusercontent.com/WnQY6YhnSzzcC9C3ipp77kDDZesj8NzcvpI3bSOVTKusw9purwlMd3YB9heGJ_gxKXRMrWW3WWK6SOVqcmOFxw9M9Y_6Wf_x-FoRLeNBO0a6EgIeXFGd5BcptW_hu2SWIjntXYCcENJRRWbXlCDfCO3QwD4lt_rZvs_Q1WMYjgh58dZGAKASsD05dfyw14rgIBxEOAiiKJlDVjiGH7Qx5BhJrkfoG0KYEPL32hKrsfu1mwTeXoj--XJ_trWpiaCgAUmRewdu0CG57nKPRdHdbUVOTv3tEt4TdTWBWRBDCB6z_wA3hPFTSgKrFqh3e1JG5MQ4SeeDhSQVhW8JcT4xo0sgx-DOWglB--zISIjKzaLlQ55qvSdE3vvXjvVshbhDl5H11G78eLFQagN8cG-pL8ZljwCKI4rZYlwMSnSuaokm-eY4ILJ44rC4Jd01-UfI6x_BiR4xwc9941XG1Am_VPV5ZrrCypKmPutKKS8EPg0e_lFBUusOh-owFJkcHedITIaLm9XbJkdAZKuVeKJLU6WoN4m_gvJSNuVVXxnp3DxLI_6I6U36tc8HbPzDUIywHpzqkhqnf2qaMJH-F-r_pQWxzAe58VZiHV_iOXyLMrXu_LnHSgV1iS9h9ODlcUiYqVfY-gUzzQgrha4cDA6xef1StRjSZ2k=w523-h62-no) >
>Figure 1

Awesome! We have a car class, an empty a Car class, but a class nonetheless. 
To create (instantiate or initialize) a car, we tell the class to make one:
>  ![](https://lh3.googleusercontent.com/tMw9XMqUUAV4xQcDRePtbrxiIuEKXzgTyXfFQlFf7t8vKtymW84LqWkoFd0LfvSlwyWJj9a0l7GSRdQhkdrmSotWVOG-RUcgWbRbYomj20tR7kIWKxgwz6uLuJWKB0kkCAAq6Ea_g-leCXcp-mSYzfETpC5vbjIutJh3E03LkBQQKSxGA43PYbzPB_ZRH4k2Oj2j9kqHcf0QMKjmf2I9qqGwgZPhwDZhvBFyZPW9a6Bz8rLHEJZQwSUng1wjwnPAuw6CxsU_ZmfbRZl-TA3RdgcrDgVMw62hTfuwuTYlyn-keR7c5kZDEaHAK2J-vYJ9uXrcwdkvbZZkiFFiIYlCT47WqhLF9xmEMqNviTtEE5t__I01osTy3ol2g-ud0L0pE4jIts2yMMATeD-IGQvLcf9uJ1bp0iVqbmAhscnRrNHqzlRTHSCZTzjjX_xSKpuDwUy1E8SGsYNttiYOmx6CIGrkLFicXl3Cr0xUAwHA6vT64J9RelmkyuQ4H6H1D_fEmq6MJ6UupXaLQ_8OtstDqL8ueI9fLrimiVmyBGefUREK0BVtvYDU96ikZjT9HPU-pXcqUpujXIu3hIagEmAdnZjGm58wCvq9XHq4aHtNC8XPtmL64n4Gh7vsDLxvT-QP22t-Cs9OyAasb6bLXjYjhQr1B5xkhTM=w512-h22-no)
> Figure 2

In this case, we’ve created a new car and assigned that car to the variable car_1. We do this by calling the .new class method on the Car class, and in return a new instance of a car, it is unique and can be identified by the object id assigned to it as shown above, so if you created two Honda Civics, Ruby will be able to tell which one is which. As of now, we haven’t given the car any attributes or methods so it’s pretty useless, but shown below in Figure 3 and Figure 4 is we want to be able to do with our car - set attributes for the car and get them when we want them.
Conceptually how we want to set instance variables:
> ![](https://lh3.googleusercontent.com/FRxB5aE6c-u1IgNCUNZ3XFfFIfYnl-VQfObORv0NtALQtGyx7qwItbwdKTWcVjvwzeWJmLbPNSKCD2_w4M90KoQBQdAZ3C_7dEjRVsRvti4xb5ETdIsonKneM4TRoT4d7ADCuI_iFClC-iC-8gfzb22e9qiTDa2PrZcsTMYIzkOpIFO9WmJe8887buSt55NfE73nVUo2z--4k6VKNgYViAqZz_HPx_Yt7DMrN5KFHiRNe6SnIaJGY0tw3kBvx5khmDI3uHvyanhqXDZco63YRUmSOEic3QqtEVnjnPiT1r-cwUVPP9PggW_jRp04olqyoqwl-a3ZorNmQtj3BJtrM1kWKfBPL90KYfir19seTHjR2ejX53rBsTxkSVZzD8r0pa7PDvjk3-mlabes5vN-bdfNDQQOkppu4PaDWXnyrHLTBqd07fzu-gRigBj7wIpOJ2N4xJETvqSI4vH8h3Nem_1ongW_eOxNzjF3zZAJjX4whKROqD9f-VrODr2eWN-8CEiSPi0NBRPMIh1297IPlgY-5-pedr1hsV-z5XJVas1RE6oN_tIPMQi_c0KbM3XOFgteV8DVXxRuSqJCgbAB1wCaFQ3sGfRBSfHxDJYnZ2evOD2kohceA1Br2cNKxvKeLsfrikPpXvwPisVswsC0gRDnzwkrakI=w527-h60-no)
>  Figure 3

And calling the instance variable to get the attributes for the car:
>  ![](https://lh3.googleusercontent.com/stBixtEpv38GO1XPkl59tA_-rvZVqezUUG3E1uWXDU0ocZpgMpfBDc71NDteyc-QwKsHo-sjxiULOvwWtAfSBaAwYlZLuBl46NidZzWNfw-hTlI40Zgk7YTsGo4dD98hfC99N3I1f9iUXZfV25tZ7Q2dGl2f1RN2S9Vqov5XXuF392wpCq76hi5W-HfZKIjFsAwY10rw5l3Lo4k37poSNkzeXLqCdXog9m-XeujeUo91bJhveTUnrneJgImpV_j4PxVikL8wofctL0ITnQzcldKTf3m98BxQm_md84qT6XY6LJgTtNKJboqjI8R0HJRZ8uRUY9TKodyh2GUSZs6mJn9jixoG7uUaxOxuwFEIaoHbsOA9Ysg45D2UTzUznCoYmKEmr2hI47yWSg0CtRtBWJ0HKQ1UwaoV_TadeXoB_bvWmaAtX8CcZ71FiuN9aiGG4_6KIKEM-Eg9oA68AhaoIISwapIcYMVe4rYsvU31VylR1A-QREfMwMR6-CYEG302zhENF7udULeh-AYYgTmmoBOcZclGyqZDuPjoXBOzCaV3ztuAVC97z0JRlHdcH7C878ziNUkh5DSjeugkvZ82lvHcRaxHrB1qILtXV1JwTuuFBo0EK7sacMFn3Vm-8iPzrv62k1ulpkx7eHT0iCOBHVjNdziWges=w538-h38-no)
> Figure 4

To be able to do this, instance variables have to be defined:
>  ![](https://lh3.googleusercontent.com/M_GTEpHGW_dgy1QiLMh6hIAmso3Mnijh_YB4DkeTRB4zemwftCZvqNO2oNjRGbAqyFZ93lxul99kdhVhBYHCo6YFn7x9bjVIEtNXlHLvY9b9qQY-ZpnOXkntQr_q2P1GZK_bn2JH-iWaasJaA9v6gSTZCOH5-wyqi0ql8POKxrtzYSSF1gFZMc4uz7PtiXVvosadxHPf7Ebo9c5GzQY8zMHVbt5c0d5Y0oowqBvXtunL1yvNq6uIgPFqZUAMfuuNWog72M4J20qxm19Bik0p9kPmchjCLKNLwMu-Vk3Zqb0bhktuDygqcamV98iQbqpt12-12yedEwCJTEcxKDSg87-l_EZcBwydHJEOR7fASJMy2CeeOyfC4Iv2MZrIQr_IwVmAmxOfyFY3osIMg_kgEF6tCSVlD_LRy7ps0dybSB2NMFSfOaLACgGEj2gT9bV9lm0RKfpM6FZED-DUc63baCU0xiMRJbJ_iZkQ5xc4W041VQMSCXIiJ8aHIajmW-Jnhr6vCsDeC69sA3cbn1Op9gPoi8Pik8ab9OfMtPor5X5Ib7HHQDp_CTKLJHvjfj6ibfyDUlQ2By5UJjfY7KsC_ezqVATmzx8s5kqA6Y1oIQGOYaDQQmIRqOVVZSGmYylGTTzOuVS4-fATJeWuOajf6r92OAfrWxk=w529-h173-no)
> Figure 5

Instance variables have a @ in front of them, to differentiate from local variables which cannot be used across instance methods; the scope of local variables will be contained in the scope in which they are defined while instance variables can be called from all the instance methods. Before we can start interacting with the instance variables like we did in Figure 3 and Figure 4, we need to create some instance method. In Object Oriented Programming this is either called getter and setters OR readers and writers because they’re made to do just that. When we write car_1.make = “Honda”, we are actually calling a method called make= on car_1, to set the value to “Honda” and when we want to get the make that is set, we need a get method, make, to call on car_1 to reveal the instance variable to us.
>  ![](https://lh3.googleusercontent.com/KT63bs8YOpLxz8QHmRpnAcE_gt8rxmJAw2BOshOBJNDaZk67I4pFVlVMGU0YUhTZq9X619QY2CygcUz9eF-RuOe9VP8iPgsN0DlmOjf6qyFLPVoYUn5AF707jF7ng9QedsMHoL-yuQen66BiT1mqMulhB5wkDfhZ0ad8bljCB5NekxN5h6IS2lx4JcblL7yZHYBfmgqnH7-4ELec2gNCQnxgebTlboc3b4eiITmbpslzAcaYZo_2nXwv5crhMYIJVDU_9I02EAwI1NaQCzOEuJ2jLDmZg6FkXOObypBXsHU_s_TE0HUw54tvGKB1E9q8vVexyX7wB3zc_hyDOtojbwcYNeas1vRD4aD_XL5psl-thUBBpruCHyg-GFt2XFkEZjVRNxoPZlRKfb38s5_FgwoEbwbWOa1EHWlZdEBa57L0qEwpb13PbD1gckEHbNsLRRlr-l9-N8wySsrpf761HTPZc1xG-STuvGIu56tnTnF8j5Rku7D-JlnrHTVMnrFeuFXx2fYzDI3v_K8_iBidttAQqbbVwZ72L78Xy8W7lCGZ3Yv962KM03VeZ0sqRokh9u0p2HYpHz4JP9_X4GtYR9NLV9M4BWBdlDdv9K8Ijf7MzfY9ug3XTnVi2o2NcWqUZGG0KosTEVWmckkcNZcGczOVpQDIp7s=w529-h484-no)
> Figure 6

There should be a getter and setter for each instance variable that we want to be able to read and write to. We only have them created for 2 of the instance variables so far in Figure 6, it’s easy to imagine that having more instance variables can easily add up to a lot of typing, and as programmers, we’re lazy, so luckily Ruby has made it simple for us, we just have to use the given method, attr_accessor followed by the instance variables we want setters and getters for prefixed with ‘:’.
>  ![](https://lh3.googleusercontent.com/yrnYr_CrG6ddYtuCYEbGwAue0pMxIL6WujZF_3vBm02x7avsyKig4ZKExuyM0sexn03BsHXtGVU7cPFxy3900aIouIj6qzDOkv8l3YYBQ5oI-QtxwOdu40KQmsfukZMJ7EiuQeQ9EcrsZXXUFZwLUh8ayiclDlW1FgdkZcwWzQfgkKb2KmXeHQBL7d64ZRKlKnPnMlcxiiQSw-iyiLhTe6rPflWR7t4lHXDWZqOEpRdlRUmE6OdCj55-lbvAhgETpC2wvT4l8VzovLnqQddfj0kI1jFA5eogl_mwzOu2q_-SQXNuzgUqbM4CXx4MtfPtfno2LgHtoI07K3yRVRz0bKbrtOwedFbMElWTnGw2eGtOvq7yWqJMM5j78CnEQqJQGvrDN5tr0NvwZ6Dw_gNm4UiWPljr0smmv3-6YNl2LfvGXyL4cOvXS9Mrl72v29YjO2XxVoBXp0ujkdx54JNkGK4pF9CkUxwbYfvAJWmPNh2F93RBQqW_ugXEeI6SbcoMeWNOh3B-tBzDf67dlwIHegzRxiFSpDAtm2hSeOMs3X_h56ttwyDncnlSPLjeCBGyZaYqzAC7FP3k2tDxC_2TRJSJTnBt5j1d2GogcLohZK-oWs0XogiiDEQB9AIXrZn0dgaVDeNmWAaAQCp50dZw4bB_ermpdDI=w528-h98-no)
> Figure 7

Figure 7 is exactly the same as Figure 6 except with setter and getter methods created for all the instance variables. 

In the real world, cars can do other things like honk, turn, accelerate, etc. We can define a #honk method in the class like so:
>  ![](https://lh3.googleusercontent.com/clTI8bEHwU3rIOcQGWjAFFyUJEGfvQ2UOMfcqOiLkDOmq_jeLhKbqTztdJSr3u6eXQHPQEMT5kInzTePftpKr2pRA6Ir3Usuf7_67QaoAkJQt_N0YnXfdGoYuaY4jcmyveYgLJsId_8trolvwcgkYVsIxh0WyYlxiQajwxL9BVeGyIMVW9e9SfZR-0OryRg8it-2ZJ0_d4DSgFCuGBsVibs5mLKnzUPjtY_fbiGgx6i3a8JaasQOguwuC6RSCFkkkQ8dNePo8a7Y2W7vvxtUWfS8-Nu3jcKa2Ur3aRCvHnvsWzmyvVmUMqyoGKc4_DAhrU8QwFl7vEvEbvmxFkp_I9slLy23AgsnDWpCbCWa7uoi5Qgx1ThdQ3O3gRRf9O7xA_DrN3PvVhGErMbvZmuSlWycQQ633JYDnxGtC0Gqhu2F4RlipBboHLLts3PUuyYjbYyZDUB_b2EhGsiVDPOBeIPqRUPK1sKVGCQ-By3I_r_Pn6h3UfWueou-RdZi0ZrqOqHJbpO70ZtgsvWxmMUyAbij7FC3ShxGJL7a1TM7AIHku-ZER7p6y3r6cJKKryCf0niKoVssCpjWeA5EISPJiATApZCFNrQKFi8UvEbLHY6d1q_Csdn5xDR7Bxa8a-RXlMqi-I5lgsCx181KLOlDGYUlQ8pCjDw=w536-h168-no)
> Figure 8

Instance methods are typically prepended # symbol when described in text. If were to call the method to make our car honk, it would look like this:
>  ![](https://lh3.googleusercontent.com/BhBmfpvUlHpXNmDnYoA1NcGOa8aEtxUJpw6r5FGK85xtY2mO7CgXYGMPbiJa8xo-324uy9AqIfHECQm35S8fIEZXGuiBtqmNKLp60HedXV8n9-Y1mlv4dB6b9JwJsPytViWXFIPTTHQdCxAHtDoUYQ1SOmAxe8NgHAbe5jQmjiEE9MS5OxhXt1X6tU9JVw4quK7EgxQaVs05owxCI_dYZ47Zc8u9lxL8ICJwxL1LMYV33k7VkErUE9ucXLhAXgNABFs9npub8cNiIFiv6NVaPj9I8Q_MJZDOJ_0GTcs6ezY2p3TB7pyW0UY4RiRhakhMXkfs6ZVl1oQTVmQZJgYo187gid9hmBrB4zdTR-POpxaUSI2V-ndqtj2qmoXGZwfZ8DaLTzKOeLqGRTeCYTouwEDGzwXOmfjXUuaM5IZJCMoK4-fDLUNDEYru5oB4S0l8Katzz2qupFqqToELCsaXWBmbOySJNxls9z05s_iQJQKqFIKs-prT__aVko1OqAnYU3ir29ujfAPyjgSLLQvh2PfI8ON3Ff8TMcL1c-yjNB6LRect4SyLgmAOQyYnkjM9CCeOOYDADMtTV3XD8s8UmlqInd1ilf0zggo0tArsLN7lR7Tl4G5XXznTINTHjxIhCIdA8LvfnvVQazKCcI6NKASXpJEEK3M=w534-h40-no)
> Figure 9

Every car created from this Car class will now be able to honk. So that should have painted a good picture of how a class is a blueprint for objects created from them…like a cookie cutter cutting out a bunch of cookies in its shape.
It was mentioned before that a class also has other responsibilities, it is often used to store and operate over the collection of the objects created from it. One way to do this is to create a class variable – specifically a class array to push the instance of an object into it at creation. In order to do this, we have to define the #initialize method which is the method that is called every time an object is created.
>  ![](https://lh3.googleusercontent.com/em3kJFWOtFaxprp7yc_nc18vl4Tf7qZFrTJRNU1-rHRwa7Ot7WFbSGY0rXp6TuPjxFS1oaltLVN3u9dLlWaFWqSX0gN_qXLzDnRCh9cQSw95bqFaScknHD_ilptQMPnttZDgiC8fnVF-IaHqiQkiL7lMggkzVYIMOhdfs9VosJSwxAoklJFuQI4OBtdE70I-h1V6Mi2PGNAJ6rC93Xd7AknXEF1JrS69lR8QmaaAYaRJqg-HfA4ftr6Fo0UkmK_gsi9qR5vkV6dEWg_SyD_s0-zEZolWor1Yzax5QvUYUmevUUluXEW4IVebKHf13AY8KMOtXSlLOkJTwfpEWCZGC1Vbi_LlmamF1Zl0O55zwYmXoshrHIH4gNRzz11e_DB4TT-wtl0Ns55qY2ur55wdxNFdNtxP9j69mtiQVHTjbPbpAIlxaE9Z8KHyJReznT_z9ktto-wvnsMQcSP1rDE_zlbuodfQ5jEToAxRVvy7Jhnp4V-jX4yC-2jl0mp0-H1x2AvbSd7XCrmMndEkIta9-8xWspyzFSM7iFypnsr13PLZ6HJ-rk3dlBnYrtP9wGUf7Rn2ztRPVqjavO9WS9LFW6Qd3doWpGitr7aAAQ_DcOIu9EYj1y-Qf6-_j9fPajRBdGZ8J1C4Gva2s8Hz4wdHagpY2CxOdQk=w547-h280-no)
> Figure 10

Class variables start with @@. In Figure 10 we defined a class variable - @@all as an empty array and the #initialize method. 
Conceptually, this is what we’re trying to accomplish – creating cars, setting attributes, getting attributes, and listing the cars we have. 
>  ![](https://lh3.googleusercontent.com/FP-rF9NKQYVefM0T-xVkPTEphEINk_ybtWgoRlT4xt-kOZgW4CzT1uktpCvrjkDnDnHm5YXFEB7xb87mETu8gIFYbzVfZi00fWBYrXuRjj6SYdZg5JlTx_ooQCD_Q93HrtKq3U5hPemN-r7sZXmOFFqn1QvahEPyAIuVSk9TGvnhOidlCNxq55izGGntUYNlU8xMZdFGwGaqOrpvJIgUOGNmkEojtcbrRNkx0KWSZHQAS6MCYWnCUG5fPSy6R0O7hhuIQA8xVFjDVa84HMXqA47_xyEw_HMVKknDjOuZVFHC4WW-6WanA-ZLMYr3LGHmPmE21Fp0M6p8Y3XnXMcOwb-TlfESjeYcG9tmmzu0cxq1M7Nd5MccgK2hO1gM6Eq9DThcqPTVlyCWy4Q2jrPFdBEST7p0MJMLlYHYuE_LTlABH7CLE4ZqzmqxjEh6Rr962YR4B5RXZvz7kVhMPhsV8BbrU-CzyMVt1vtpAu9ufR7GQhmNV55WDW2I-BNJD0AaWXf1RmVpHkB7GDtA6Djd4VxGcKG5K6-s2jxkuZIzFRoDJfGbbt7mkytHSA8riOxQIvmX-ftesV-RPdA2RL82QoMkal40bkGW-9Gx3KwiREDjUL3APNbHljretNd-U_o4n52QniBm_uYnblyKc-RCgmR8mMLiyeY=w617-h292-no)
> Figure 11

Notice that class methods are the ones called on the Car class itself with the responsibility to be aware of all car objects, and also operating on them, in this case, we created a class method .count_all (class methods are prefixed with ‘.’ when referred to in text) to return the count of cars we have. We could just as easily define a class method called .repaint and call it on the class to iterate through all car objects and set their color to blue.
When thinking about classes and instance objects, one has to be familiar with the two scopes - whether you’re going to develop/call a method for an instance or the class itself. The assignment of a method to either is done by the proper use of ‘self’ which tells Ruby if you’re referring to the instance or the class. If ‘self’ is used inside an instance method, it refers to the instance object, when it is used on the outside it refers to the class. We need to create a class method to be able to return to us the class variable @@all, as we created getter instance methods to return to us instance variables.
The magic under the hood:
>  ![](https://lh3.googleusercontent.com/KS1BjoKzuxLZsHwTPLgwTu9yoO3nAncyjH7nUF91roVjoDC6uDb7PJ5MSVZgStOz3Nlv79OH6BjvNpbbScTdlceSHhLfDgQx1E18GJlaqSdClS7N7MxN9VtndxwiaY847CSgzGKYGo4MMw814OljzbY-DNV5UT8IT6BqKk8PFYivvxRyNKacjjMcKwcikBEIzyM6zueNeg6NtpS6c263xWUQSauqZwTbe5DGnM71tAhO5TMGpXsQLJYb3C2Fm5WuX0mFwaTH9ZF3cU2arHtX21GYBw5bfe8sHkyRytXQwweIjQHYsJRmpMfzeXde_qhQpMM1M55xA_2drgt9JNDhYhOOoDN4hFOhXxaRZ-t_MDa-hPLshVMv9r5tLtFGv2jnyzgEEXwq-XcdS4p_hcjZoY7Ysiw1KXuk1bRwBCGVH9mZpNaCs_rGjTxe1VxHpHi73Ov32-aIn3QBfzhsZGNLKADHtJe8h0KphlLevfGq81MboyO_hXoDU7jtmZDnFXDUfi6_llTUHk5ds94Xf7PcYZj5HQWNmbd4sKPJP_ndgmAuT8LsY7lSby5-h5fIDXFXp9TZTo-pqgPaAFTBWhq0XZtKZA_cxydHEHrq_sSA0DZeJUemglxfxK4r9sneERSFDU2NruznEOCZ-D52lmng_5bcXZVU81s=w546-h513-no)
> Figure 12

There are cases when you would need to access class methods within an instance method. You can’t call self.all within the instance variable since ‘self’ will refer to the instance itself. In this case, ‘self.class’ needs to be prepended to the class method you want to call. In Figure 13, we will define an instance method #other_cars to do this.
>  ![](https://lh3.googleusercontent.com/LDqDXY1oUv7TIHQUHAr868byC9J7jWHN2K12oD9ei-gxyYIFKCR97zF-jSS9wi_hYo3-RipryCcG6_Faj-BY9H5Da3ep5jW7-HlVJg0ckJmjAbfeE5tWRlkdfu5Ep50si_agXAZOsUPW1YFNEz9vE-pHlCpIAwptAbod-fpzM-7d8J3hHdnxO_tuXsaiKk_yXD5-fqoOQ3Ez1K1OqQbmCR7UDfud50CLaN5G1Fe7RUQjSRjceEMosEauJqOB19sX7vP5IKg9kQLTS_qKYoxQrbt_K3ZMscE2Dnhjz9nInvBJBr_tzrBFgoai6Xc4ZGGpxGerpL_XN4X5SBZg-G1er3L_JvWWrZ38EFt4RmT3lehnVcBH7AjaUPOvV-Vq7nvCFzq9mFL1b0P-J1KhM9OG-jTTp2jeCjehZnsQ1KASGBcsBbhbrmk6muICrogrNos76rz1D6ftky4nhvWlTLJKcUdTPytu0IndStFmCNZ1uWu5mnq9262vHjZ-NK3QSpPWHHgO68MTjLbXI7Xg45UCL9ehGL3l3_V_nY_9n862QmzqMObkAiRR-3cD2kEkZRPv-2K27l2ja3wED6_c0WHHN4vg6enJ8qW8hMUFwK32RdyZSi6nV0tGOSnFr8FnwCrCJFWphMwt1Lq3W4kow5RAL51YVYSNXz8=w508-h96-no)
> Figure 13

#other_cars in action:
>  ![](https://lh3.googleusercontent.com/cA6k-Raxc2Nz64lIX_nfx9h64ic1S2JTqASCbtXMnIIDAYM92vo6yeByavhQfLWx3OiywCZjsg_wZz9lXHk6UnX8PcY0OUAz8G8IiAcr7JgjNhnMDlvIv7d-kovyriw73INfZL83-i5Tl94lkDp1Ya8aFEwVxIEn4qrqQXS-akwylrqPrFdYbVhiB1JbQpRmTx3BWc4Tr8m0d4OPtuAFgGbfswB40UqQ1rlbQmJVWR3qXrQO7qy6X9lWtWZrh2WyFm8Wa5O4S0ng0C7xYZdzALf1MvIUdeAHmVPe2-1VDWuwNy6IaS5opTbQKbQ1Hwgq1GRXragm4Ro8gQHNeYNgPtfUolLMnXPZ978C3A0fZoout5xb5esjPH0gIRS8NmIo4EfH8HqTaWjdPDlWthl0ppa0bHB6zFdlJ_s4pwq3m7-Xth2F2wpqqJkUvT1hTo_v1BxsGRpqibVvfTqBUrc28COHoujRvFvsehnqm3wbBBwJ9wlVlcqERaCo0nLNcYTuXLrk2W2tv0L8fFn9P_CEURK2FkphclV9KNsS7LXDVkr7h3b2LDxcHVU1SYBTYx6PnXZc5XOJD2HH0t98FU5298k5NAOXpsAlV41JxJL_NlZxaxVjSrrsNv8WB5Xwk0dU-xSfB34_cvLXsWwteepYEPkwP1OjjQ0=w532-h119-no)
> Figure 14

At this point, you should have a general understanding of how to build a class and define methods. Now we will briefly touch upon how we can use objects to interact with each other to form relationships, this is the essence of OOP. To illustrate, we’ll create two classes, Car and Owner.
>  ![](https://lh3.googleusercontent.com/wkZLWVatUK10brs0_F3WLJTi-HlfgNn22vCwGmovSu76he6kciJCp1_c1ZzQ2EHsV3UpOOKbMrbP-ZjNi2FvAHDSR0xja8_be7YMa5WuUZD8AHMRwxVINd0YBxolA1CvXdeY9Op3mYStnxmjpc_OiUFHiRoV1ctYBR3FNrRJ1hZ9ZbAwgo2yzZiqLsIJzqXOPiwrK_DMdwhrgrhBX_ASS7lGhElVeWF2z8Y6gFp4fFjfdbuiW_i8RDO_25I0z9zunNL02izhK_foMzA-KqczSOXIdgqPAXp6sZ12wQUpV_wqN7W0Bga-c91z7RJq2BjFYm7FfcZf9zT4oU8T_YeEXcOt_clRwfG-dKGzz65twY7tLa4U51dRF_18QPoqDiEaS7OFA5VQ33tLwSNWMI1S0D8aK_wr4L5faNNxqJTgnAMITivPYWnZHXtx_Xpt235Io2flo-xJthOHVZWAY3VGT_cDWFkBc38zGfBABVg9VU_IMZFBS0-YqPGFQXtv_lZ4oqnyHJ7Nsx4VOKM4QnQYKBamyKzOLhxaf-X_AJgB1xZGiyc9rTEQJURw9hWxk0rNKsz0Ad5T4guFmzZ0le4d0_p4q9G4h__kl9pigvand1fIi-aLlxl__YHuRRIruesBpRnNc3skYVMKl02o7KNv6zOChWJuKwM=w502-h268-no)
> Figure 15

Looking at the initialize method for both classes, we’ve included parameters which will be required at the creation of each instance object and the parameters will be set to the objects’ instance variables then instead of needing to be individually assigned afterwards. Also the relationship between these objects can be described by saying that a car belongs to an owner, and also, an owner can have many cars. Therefore, in the Car class, an instance variable has been defined in which we can set an instance of a car’s owner to, while in the Owner class, we’ve set @cars to be an empty array in which we can add multiple cars to the owner’s list of cars.
> ![](https://lh3.googleusercontent.com/J330s2UbYFf4pIntb0HuTZaQdWaWfTi3oPZe7B8RNO7Jd-Za66Ze26Lpbhs60s761TZScFr1y6qzhdX_CjTeMlCLb4cLUbgbmjl5o5Je5hTKp623HGmSap_UzaKyFHwsnBdtXidlombC_4TCVUBflR6SbqsO9vV00Cer4xGPakXoK_8hCcrVOF_VBucTrgI5qMi7YVcG_w0JPf7pYbSSvHxoBBPIR6LuTbZi2iJndP7UpvxwrNmFGxFXMVvDNMKNQ91DOL3qwL0x-LyfzFN0KgFLZtnUyXbPE66PhKykrWqpO04Q2SVJMNPxQd_7INUNxFFCI9o2f_IZ5dXweBWAHu8eX3NHuDNekhiBtW-HOqqkdVxw2RMAqWmGt7iYSN30eCNEzJzxNkCsqG8Irzstc_kCgvjYgHK8Q3VE2jTfkcZxzAeSjjKhHzzysHQzGGpcSSJ0P8oE-vSZA4sR-NycBgmpIbHlKUB8bhcl6rWcjTGxzBmGokFG1t7LukXMp7VHrU7xBRBQqeAiTGfOZyn-k6USirj832RgcsxOHWNxXDSWQb72nLl_Ko2IzG6cw7sQ7zjabST0ftO1U3mUugRhDSHkDxo7-rBFVLkSZlbBE9ssecuGZ_Ku8godRTatoaczudwtv5_tgimrwDHMj_9BWrM_5GtnIEE=w688-h311-no)
> Figure 16

We created 3 cars and 2 owners in a way that isn’t much different than before. We have 2 owners with the name “John Smith”, but as stated before, in OOP, every instance object is unique. No longer are we assigning basic data types like strings or integers to variables, we can now form relationships between unique objects. If we set car_1’s owner to the 20 year old John Smith, we can always find car_1’s owner by simply entering car_1.owner.
>  ![](https://lh3.googleusercontent.com/UV8aaie2rBhAqCG-utTWj_ofvzQsQccgpOFHK6ktHkCir9xnGlroBmkrVzmyjh-QW-xCXca_HB8Pf9Jztdigsl7BNoyc7KYvno2cXo41LyJhz9TFlWNjyPQIfZg3zfXYs3-Yfho6PNe1rmhTCNrik3rWYZfx-QbY_JHcHskx2ZclLzV82YTnerWW6QH2FNx5pQ4LBpDp7dwD-AzTWT8laf5oLl_psKnqyKfDjegQcZ5noF-orui-orDjZ5EFse0PqgcNLSjSKV0nTfG7HWYtl_tR4_TXpM_ygSN6OsvSmmcZXWneFP3BvxNKAJSMxottKeo_8nJp9GbqIlSu9t6ZV8EeGdvt9DRyJThop9teLJpi4LLM-rbbDXqE9YjgXlL1Szn_BsFKOPM-DX8zT6ZK4DDWHTHM0yXxybRZDs3gUyQpC24U39CIOSKOQdCdvgxgDkmGPtkABUfilwO3LL0Ymb1b0ovNvO7pWD3B6u1MceNp8EQzCkhxRXYQ0F8EkTeFid6sU1iyRXYqKQIHUHbuLkB-uvarsUzSRUbMg0L6Ldny_VYf1uedaKYXvmE-3j5Um-OClry1-JG4b445Q2YOeWmji70ksanTJdnnNvC43uspiRkZ554mmq6qr7LYN3DTbc_BC5RCk6IZA9Zqe224T3YrZ56DIzk=w687-h152-no)
> Figure 17

>  ![](https://lh3.googleusercontent.com/UgYHykbb4KVXQkKUIgH2SNc8FKfC3wfFCKajjRNiIgSdYVHpZTYNJTEu2qpEfv_WHnELIz40ruFbjFAJNXZ_1bt0h-5hI2BOMPflcETBmPaUOZyEhCgeo-QNNVYlT9O2Okt9R8IErARahiBP4CwXQZypIkFf61vDTn4i6-2ex38mmHyv2mznLZVOy9xjNRYnWwm0BGqhTTttPf8Cq2syE1z_r4emRkbjclIK86lyrb78tTV8ktWelZutzu85eUYBaqLvuYjMP4AJAC5v_iUrq5Oz9uqQ4YInRcS-KQrKoklhuRJeKcPnZo1q6IQm3K9qcegKUSQ1yAauCnMHUsvh85QwNUD-dexzV6Gb1e7A9hAHJvHA4fGec-gBid9s2Ckt78RGDiSt_injhWjk3Eh7qv-brq56PvLdy1x8lJDzSTm0RfBUV0E3ciTngVXrpnbK_6pInapht-xY5xFCNQN2h-xNlUkkR-YA9Ay8SHa75FDdgsLWGkAEW4r-3EosDRDyRVnACp4BE4FthDGOp5NawBi-M-Ogy94KWJcgPg7xs5y2bnM-ndmBx66-CXETe4p88xKasoTtyWWnxF3o9EFE3EdrPYwMrwAejHpbBbmKKjoWzM2LdoDTpj66uTjxh62JiMf_7RGSuov1rjjjOC91Y-F3Z_c1vxQ=w542-h43-no)
> Figure 18

And some more OOP magic of connecting objects and chaining of methods to pretty much find connected objects and call methods on them:
>  ![](https://lh3.googleusercontent.com/WRWzD18EJU6UOLQ_AOUDs7J974-aunstlzXkg-qrGREbgp_aCZgMxjDTObGwx1D8nXLIqlz8tQKogqvDZu51UlwXxpZYCR55Osm4ZnflCtI1ehgU6ZWSrsWwWUSxUSW_QKw-hShWY_5npBDNW3UGXrej9HqYeNMX0CXPoasNbp7Eij8F0x2TljVEJmkJk3pwKWlvNcvWrT4CgZt4rHuE0vObGLzp7nOyfStY-IXr82SGKCKxyVspfZMhgQrvWZpQbhDXA6fYGknXNgRO7ddFZIrbLJlp564J22vS4EErsUzUUaa50k0ydRT7H9psqf9JZ9yiZbUhX8jqiNLj5v6RhvDzbyo0TFg9sAjzXI7k-Yb-ue7oYdBCLCMxqOMUxqUwQOYLtlYZdljJvW3IJnrY9PSNpZgDYFqdOa3sRPmBbAD08hhTNozvV-nk9lBwvIKP_xlXuADie4vUSB2qwgBsQQun1AGehpemn9z5Zu-7fY9akrpaIo9_pmzgJkXM2O_gwi1J4AeazVVARQU8UmjTqmB6TyakFTrCdTtNe9UhlTx21mqw1sPS3KcjRGezNc84C7u9h96l8a4lNCZXQM4xAreDyJ-N5q4o7Ffgicl5GCS22pLQvOGuwX5PbNFu74VLaZe24sDD9yCC-MFboh6LdnHLXkHcRYw=w695-h560-no)
> Figure 19

And that wraps up the basics of Object Oriented Programming –  it might take a little playing around to fully grasp the concepts, but in summary, it’s just way to store customized objects and create relationships between them – creating a unique person with the name of “Bob”, who is 40 years old, and lives in his grandma’s basement instead of just the string “Bob”.

